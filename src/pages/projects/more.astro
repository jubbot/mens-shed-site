---
export const prerender = false;
const FEATURE_SANITY_DISABLED = true;
if (FEATURE_SANITY_DISABLED) {
  const message = "This section is being migrated to Supabase.";
  return <div style="padding:2rem"><h2>{message}</h2></div>;
}
import ProjectList from '../../components/ProjectList.astro';
import { sanity } from '../../lib/sanityClient';

const url = new URL(Astro.request.url);
const sp = url.searchParams;

const offset      = Math.max(0, Number(sp.get('offset') || 0));
const limit       = Math.min(50, Math.max(1, Number(sp.get('limit') || 10)));
const end         = offset + limit;

const qRaw        = (sp.get('q') || '').trim();
const tokens = qRaw ? qRaw.split(/[^\p{L}\p{N}]+/u).filter(Boolean).slice(0,5) : [];
const wildcard = (s) => `${s}*`;
const [t0,t1,t2,t3,t4] = [
  wildcard(tokens[0] || ''), wildcard(tokens[1] || ''), wildcard(tokens[2] || ''),
  wildcard(tokens[3] || ''), wildcard(tokens[4] || '')
];

const category    = sp.get('category') || '';
const subcategory = sp.get('subcategory') || '';

const orderClause = 'order(coalesce(dateTime(startedAt), _createdAt) desc)';

const TOKENS_COND = `
  ($t0 == "" || (
    title match $t0 || coalesce(description, "") match $t0 ||
    category->title match $t0 || subcategory->title match $t0 ||
    select(
      kickstartedBy.kind == "member" =>
        coalesce(
          kickstartedBy.member->displayName,
          kickstartedBy.member->fullName,
          kickstartedBy.member->name,
          kickstartedBy.member->title,
          kickstartedBy.member->firstName + " " + kickstartedBy.member->lastName,
          ""
        ) match $t0,
      kickstartedBy.kind == "other" => coalesce(kickstartedBy.name,"") match $t0,
      false
    )
  )) &&
  ($t1 == "" || (
    title match $t1 || coalesce(description, "") match $t1 ||
    category->title match $t1 || subcategory->title match $t1 ||
    select(
      kickstartedBy.kind == "member" =>
        coalesce(
          kickstartedBy.member->displayName,
          kickstartedBy.member->fullName,
          kickstartedBy.member->name,
          kickstartedBy.member->title,
          kickstartedBy.member->firstName + " " + kickstartedBy.member->lastName,
          ""
        ) match $t1,
      kickstartedBy.kind == "other" => coalesce(kickstartedBy.name,"") match $t1,
      false
    )
  )) &&
  ($t2 == "" || (
    title match $t2 || coalesce(description, "") match $t2 ||
    category->title match $t2 || subcategory->title match $t2 ||
    select(
      kickstartedBy.kind == "member" =>
        coalesce(
          kickstartedBy.member->displayName,
          kickstartedBy.member->fullName,
          kickstartedBy.member->name,
          kickstartedBy.member->title,
          kickstartedBy.member->firstName + " " + kickstartedBy.member->lastName,
          ""
        ) match $t2,
      kickstartedBy.kind == "other" => coalesce(kickstartedBy.name,"") match $t2,
      false
    )
  )) &&
  ($t3 == "" || (
    title match $t3 || coalesce(description, "") match $t3 ||
    category->title match $t3 || subcategory->title match $t3 ||
    select(
      kickstartedBy.kind == "member" =>
        coalesce(
          kickstartedBy.member->displayName,
          kickstartedBy.member->fullName,
          kickstartedBy.member->name,
          kickstartedBy.member->title,
          kickstartedBy.member->firstName + " " + kickstartedBy.member->lastName,
          ""
        ) match $t3,
      kickstartedBy.kind == "other" => coalesce(kickstartedBy.name,"") match $t3,
      false
    )
  )) &&
  ($t4 == "" || (
    title match $t4 || coalesce(description, "") match $t4 ||
    category->title match $t4 || subcategory->title match $t4 ||
    select(
      kickstartedBy.kind == "member" =>
        coalesce(
          kickstartedBy.member->displayName,
          kickstartedBy.member->fullName,
          kickstartedBy.member->name,
          kickstartedBy.member->title,
          kickstartedBy.member->firstName + " " + kickstartedBy.member->lastName,
          ""
        ) match $t4,
      kickstartedBy.kind == "other" => coalesce(kickstartedBy.name,"") match $t4,
      false
    )
  ))
`;

const BASE_FILTER = `*[_type == "project" && defined(slug.current)
  && (${TOKENS_COND})
  && ($category == "" || references(*[_type=="category" && slug.current==$category]._id))
  && ($subcategory == "" || references(*[_type=="subcategory" && slug.current==$subcategory]._id))
]`;

const MORE_QUERY = `${BASE_FILTER} | ${orderClause} [$offset...$end]{
  "slug": slug.current,
  _id,
  title,
  startedAt,
  "started": coalesce(dateTime(startedAt), _createdAt),

  "kickstarterName": select(
    kickstartedBy.kind == "member" => coalesce(
      kickstartedBy.member->displayName, kickstartedBy.member->fullName, kickstartedBy.member->name,
      kickstartedBy.member->title, kickstartedBy.member->firstName + " " + kickstartedBy.member->lastName
    ),
    kickstartedBy.kind == "other" => kickstartedBy.name,
    null
  ),
  kickstartedBy{ kind, name, member->{ displayName, fullName, name, title, firstName, lastName } },

  category->{ title, "slug": slug.current },
  subcategory->{ title, "slug": slug.current },

  "volunteers": coalesce(volunteers, 0),
  "views": coalesce(views, 0),

  "images": array::compact([
    select(defined(thumbnail.asset) => thumbnail.asset->url, null),
    ...select(defined(gallery[]) => gallery[].asset->url, [])
  ])[0...3]
}`;

let rows = [];
try {
  rows = await sanity.fetch(MORE_QUERY, { category, subcategory, t0, t1, t2, t3, t4, offset, end });
} catch (e) {
  console.error('MORE_QUERY error:', e);
  rows = [];
}

const projects = (rows ?? []).map((r) => ({
  id: r._id,
  slug: r.slug,
  catSlug: r.category?.slug || null,
  subSlug: r.subcategory?.slug || null,
  title: r.title,
  dateLabel: r.started
    ? new Date(r.started).toLocaleDateString('en-AU', { day: 'numeric', month: 'long', year: 'numeric' })
    : '',
  kickstarterName: r.kickstarterName || '',
  kickstartedBy: r.kickstartedBy ?? null,
  volunteers: Number(r.volunteers) || 0,
  views: Number(r.views) || 0,
  images: Array.isArray(r.images) ? r.images : [],
}));
---

{projects.length > 0 ? (
  <div id="payload">
    <ProjectList projects={projects} />
  </div>
) : (
  <div id="payload"></div>
)}