---
export const prerender = false;
const FEATURE_SANITY_DISABLED = true;
if (FEATURE_SANITY_DISABLED) {
  const message = "This section is being migrated to Supabase.";
  return <div style="padding:2rem"><h2>{message}</h2></div>;
}

import Layout from '../../layouts/Layout.astro';
import Banner from '../../components/banner.astro';
import ProjectList from '../../components/ProjectList.astro';
import CategoryAccordion from '../../components/CategoryAccordion.astro';
import ProjectSearchFilter from '../../components/ProjectSearchFilter.astro';
import RecentEvents from '../../components/RecentEvents.astro';
import { sanity } from '../../lib/sanityClient';
import TrackPageView from '../../components/TrackPageView.astro';

// Categories
const CAT_QUERY = `*[_type == "category" && defined(slug.current)]{
  _id, title, "slug": slug.current, icon,
  "count": count(*[_type == "project" && references(^._id)]),
  "subcategories": *[
    _type == "subcategory" && references(^._id) &&
    count(*[_type == "project" && references(^._id)]) > 0
  ]{ title, "slug": slug.current, "count": count(*[_type == "project" && references(^._id)]) } | order(title asc)
} | order(title asc)`;

let categories = [];
try { categories = await sanity.fetch(CAT_QUERY); } catch { categories = []; }

// URL params
const url = new URL(Astro.request.url);
const sp = url.searchParams;

const qRaw        = (sp.get('q') || '').trim();
const category    = sp.get('category') || '';
const subcategory = sp.get('subcategory') || '';

// Tokenised search (ALL tokens must match somewhere)
const tokens = qRaw ? qRaw.split(/[^\p{L}\p{N}]+/u).filter(Boolean).slice(0,5) : [];
const wildcard = (s: string) => `${s}*`;
const [t0,t1,t2,t3,t4] = [
  wildcard(tokens[0] || ''), wildcard(tokens[1] || ''), wildcard(tokens[2] || ''),
  wildcard(tokens[3] || ''), wildcard(tokens[4] || '')
];

// Sort: newest by startedAt (fallback _createdAt)
const orderClause = 'order(coalesce(dateTime(startedAt), _createdAt) desc)';

// Multi-field token matching
const TOKENS_COND = `
  ($t0 == "" || (
    title match $t0 || coalesce(description, "") match $t0 ||
    category->title match $t0 || subcategory->title match $t0 ||
    select(
      kickstartedBy.kind == "member" =>
        coalesce(
          kickstartedBy.member->displayName,
          kickstartedBy.member->fullName,
          kickstartedBy.member->name,
          kickstartedBy.member->title,
          kickstartedBy.member->firstName + " " + kickstartedBy.member->lastName,
          ""
        ) match $t0,
      kickstartedBy.kind == "other" => coalesce(kickstartedBy.name,"") match $t0,
      false
    )
  )) &&
  ($t1 == "" || (
    title match $t1 || coalesce(description, "") match $t1 ||
    category->title match $t1 || subcategory->title match $t1 ||
    select(
      kickstartedBy.kind == "member" =>
        coalesce(
          kickstartedBy.member->displayName,
          kickstartedBy.member->fullName,
          kickstartedBy.member->name,
          kickstartedBy.member->title,
          kickstartedBy.member->firstName + " " + kickstartedBy.member->lastName,
          ""
        ) match $t1,
      kickstartedBy.kind == "other" => coalesce(kickstartedBy.name,"") match $t1,
      false
    )
  )) &&
  ($t2 == "" || (
    title match $t2 || coalesce(description, "") match $t2 ||
    category->title match $t2 || subcategory->title match $t2 ||
    select(
      kickstartedBy.kind == "member" =>
        coalesce(
          kickstartedBy.member->displayName,
          kickstartedBy.member->fullName,
          kickstartedBy.member->name,
          kickstartedBy.member->title,
          kickstartedBy.member->firstName + " " + kickstartedBy.member->lastName,
          ""
        ) match $t2,
      kickstartedBy.kind == "other" => coalesce(kickstartedBy.name,"") match $t2,
      false
    )
  )) &&
  ($t3 == "" || (
    title match $t3 || coalesce(description, "") match $t3 ||
    category->title match $t3 || subcategory->title match $t3 ||
    select(
      kickstartedBy.kind == "member" =>
        coalesce(
          kickstartedBy.member->displayName,
          kickstartedBy.member->fullName,
          kickstartedBy.member->name,
          kickstartedBy.member->title,
          kickstartedBy.member->firstName + " " + kickstartedBy.member->lastName,
          ""
        ) match $t3,
      kickstartedBy.kind == "other" => coalesce(kickstartedBy.name,"") match $t3,
      false
    )
  )) &&
  ($t4 == "" || (
    title match $t4 || coalesce(description, "") match $t4 ||
    category->title match $t4 || subcategory->title match $t4 ||
    select(
      kickstartedBy.kind == "member" =>
        coalesce(
          kickstartedBy.member->displayName,
          kickstartedBy.member->fullName,
          kickstartedBy.member->name,
          kickstartedBy.member->title,
          kickstartedBy.member->firstName + " " + kickstartedBy.member->lastName,
          ""
        ) match $t4,
      kickstartedBy.kind == "other" => coalesce(kickstartedBy.name,"") match $t4,
      false
    )
  ))
`;

// Base filter
const BASE_FILTER = `*[_type == "project" && defined(slug.current)
  && (${TOKENS_COND})
  && ($category == "" || references(*[_type=="category" && slug.current==$category]._id))
  && ($subcategory == "" || references(*[_type=="subcategory" && slug.current==$subcategory]._id))
]`;

// Count → controls "Load more"
const COUNT_QUERY = `count(${BASE_FILTER})`;
let total = 0;
try {
  total = await sanity.fetch(COUNT_QUERY, { category, subcategory, t0, t1, t2, t3, t4 });
} catch { total = 0; }
const hasMore = total > 10;

// First page (10)
const FIRST10 = `${BASE_FILTER} | ${orderClause} [0...10]{
  "slug": slug.current,
  _id,
  title,
  startedAt,
  "started": coalesce(dateTime(startedAt), _createdAt),

  "kickstarterName": select(
    kickstartedBy.kind == "member" => coalesce(
      kickstartedBy.member->displayName, kickstartedBy.member->fullName, kickstartedBy.member->name,
      kickstartedBy.member->title, kickstartedBy.member->firstName + " " + kickstartedBy.member->lastName
    ),
    kickstartedBy.kind == "other" => kickstartedBy.name,
    null
  ),
  kickstartedBy{ kind, name, member->{ displayName, fullName, name, title, firstName, lastName } },

  category->{ title, "slug": slug.current },
  subcategory->{ title, "slug": slug.current },

  "volunteers": coalesce(volunteers, 0),
  "views": coalesce(views, 0),

  "images": array::compact([
    select(defined(thumbnail.asset) => thumbnail.asset->url, null),
    ...select(defined(gallery[]) => gallery[].asset->url, [])
  ])[0...3]
}`;

let firstBatch = [];
try {
  firstBatch = await sanity.fetch(FIRST10, { category, subcategory, t0, t1, t2, t3, t4 });
} catch (e) {
  console.error('FIRST10 error:', e);
  firstBatch = [];
}

const projects = (firstBatch ?? []).map((r: any) => ({
  id: r._id,
  slug: r.slug,
  catSlug: r.category?.slug || null,
  subSlug: r.subcategory?.slug || null,
  title: r.title,
  dateLabel: r.started
    ? new Date(r.started).toLocaleDateString('en-AU', { day: 'numeric', month: 'long', year: 'numeric' })
    : '',
  kickstarterName: r.kickstarterName || '',
  kickstartedBy: r.kickstartedBy ?? null,
  volunteers: Number(r.volunteers) || 0,
  views: Number(r.views) || 0,
  images: Array.isArray(r.images) ? r.images : [],
}));

// Active cat/sub (for empty-state + page title)
const activeCatObj = category ? categories.find((c: any) => c.slug === category) : null;
const activeSubObj = activeCatObj && subcategory
  ? (activeCatObj.subcategories || []).find((s: any) => s.slug === subcategory)
  : null;

// Empty-state message
let emptyMsg = 'No projects available.';
if (category && !subcategory) emptyMsg = `No projects available in the “${activeCatObj?.title || category}” category.`;
if (category && subcategory)  emptyMsg = `No projects available in the “${activeSubObj?.title || subcategory}” subcategory.`;

// Page title suffix for <Layout>
const base  = 'Projects';
const scope = [activeCatObj?.title, activeSubObj?.title].filter(Boolean).join(' — ');
const pageSuffix = qRaw
  ? (scope ? `“${qRaw}” — ${scope} — ${base}` : `“${qRaw}” — ${base}`)
  : (scope ? `${scope} — ${base}` : base);
---

<Layout title={pageSuffix}>
  <div class="wrapper">
    <Banner/>

    <section class="width-fix-300">
      <div class="left">
        <div>
          <ProjectSearchFilter />
          <CategoryAccordion categories={categories} allowMultiple={false} />

          
          <div class="jobAssignment" role="complementary" aria-label="Start a job with us">
            <h3>Have a job in mind?</h3>
            <p>Tell us what you need—it takes about 2 minutes. No obligation. We’ll reply within 2 business days.</p>
            <a class="btn btn-delta" href="/job-form" aria-label="Open the job form to request a job"><i class="wt-toolbox"></i> Start the job form</a>
          </div>
 </div>
          	<div class="member-list">
			<h4><i class="wt-users"></i> New Members</h4>
			<p>Welcome! Our volunteers update this list of new members every weekly.</p>

			<ul class="pills">
				<li>Alan (Charles) Causon</li>
				<li>Vigor Darrington</li>
				<li>Mike Grigg</li>
				<li>Banjo (Wayne) Murray</li>
				<li>Devon Snell</li>
				<li>John Stutley</li>
				<li>Graeme Taylor</li>
				<li>Wayne Bromham</li>
			</ul>

				<p>Last updated: August 7, 2025</p>
			</div>

       
      </div>

      <div class="right">
        <div id="projects-root">
          {projects.length > 0 ? (
            <ProjectList projects={projects} />
          ) : (
            <div class="empty-state stack-xs" role="status" aria-live="polite">
              <p>{emptyMsg}</p>
              <div class="actions">
                <a class="btn btn-delta" href="/projects">Clear filters</a>
                {category && subcategory && (
                  <a class="btn btn-ghost" href={`/projects?category=${encodeURIComponent(category)}`}>
                    See all in {activeCatObj?.title || category}
                  </a>
                )}
              </div>
            </div>
          )}
        </div>

        {projects.length > 0 && hasMore && (
          <div id="load-controls" class="grid center-center" style="margin:30px 0;">
            <button id="load-more" class="btn btn-delta" type="button">Load more</button>
            <div id="load-status" class="sm-txt muted" aria-live="polite"></div>
          </div>
        )}
      </div>
      </section>

    <RecentEvents
      heading="What’s on"
      limit={3}
      viewAllHref="/whats-on"
      detailBaseHref="/whats-on"
    />
  </div>

  <script is:inline>
    (() => {
      const root = document.getElementById('projects-root');
      const btn = document.getElementById('load-more');
      const statusEl = document.getElementById('load-status');
      if (!root || !btn) return;

      const BATCH = 10;
      let offset = root.querySelectorAll('[data-project]').length;
      let loading = false;
      let done = false;

      function showEndOnce() {
        if (done) return;
        done = true;
        btn.remove();
        statusEl.textContent = 'No more projects left.';
        statusEl.setAttribute('aria-live', 'polite');
      }

      const loadMore = async () => {
        if (loading || done) return;
        loading = true;
        btn.disabled = true;
        const prev = btn.textContent;
        btn.textContent = 'Loading…';
        statusEl.textContent = '';

        try {
          const url = new URL('/projects/more' + location.search, location.origin);
          url.searchParams.set('offset', String(offset));
          url.searchParams.set('limit', String(BATCH));

          const res = await fetch(url.toString(), { headers: { accept: 'text/html' } });
          const html = await res.text();
          const doc = new DOMParser().parseFromString(html, 'text/html');
          const payload = doc.getElementById('payload');

          const hasItems = payload && payload.querySelector('[data-project]');
          if (!hasItems) { showEndOnce(); return; }

          const frag = document.createDocumentFragment();
          Array.from(payload.children).forEach((el) => frag.appendChild(el));
          root.appendChild(frag);

          offset = root.querySelectorAll('[data-project]').length;
        } catch (e) {
          console.error(e);
          statusEl.textContent = 'Failed to load.';
        } finally {
          if (!done) {
            loading = false;
            btn.disabled = false;
            btn.textContent = prev;
          }
        }
      };

      btn.addEventListener('click', loadMore);
    })();
  </script>

  <style>
    .empty-state { padding: 1rem; border: 1px dashed var(--border, #dcdfe5); border-radius: 8px; }
    .empty-state .actions { display: flex; gap: .5rem; margin-top: .5rem; }
  </style>
  <TrackPageView key="projects" />
</Layout>
