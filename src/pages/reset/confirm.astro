---
import Layout from '../layouts/Layout.astro';
import authResetConfirmUrl from '../../scripts/auth-reset-confirm.ts?url';
---

<Layout title="Choose a new password">
  <div class="wrapper auth">
    <div class="panel">
      <h1>Choose a new password</h1>

      <form id="newpass-form" class="form" novalidate>
        <label for="password">New password</label>
        <div class="pwd-row">
          <input type="password" name="password" id="password" required minlength="8" />
          <button class="peek" type="button" aria-label="Show password" data-target="password">üëÅÔ∏è</button>
        </div>

        <div class="meter" aria-hidden="true"><div id="meter-bar"></div></div>
        <ul class="hints" id="hints"></ul>

        <label for="confirm">Confirm new password</label>
        <div class="pwd-row">
          <input type="password" name="confirm" id="confirm" required minlength="8" />
          <button class="peek" type="button" aria-label="Show confirm password" data-target="confirm">üëÅÔ∏è</button>
        </div>

        <button id="submit" type="submit" class="btn" disabled>Update password</button>
        <p id="newpass-status" class="status" role="status" aria-live="polite"></p>
      </form>

      <p class="back"><a href="/login">Back to login</a></p>
    </div>
  </div>

  <style>
    .wrapper.auth{display:grid;place-items:center;min-height:60svh;padding:2rem}
    .panel{width:min(560px,100%);background:#fff;border-radius:12px;padding:1.25rem 1.5rem;box-shadow:0 8px 30px rgba(0,0,0,.07)}
    .form{display:grid;gap:.85rem}
    .pwd-row{display:grid;grid-template-columns:1fr auto;gap:.5rem;align-items:center}
    input[type="password"],input[type="text"]{padding:.6rem .7rem;border:1px solid #d1d5db;border-radius:8px}
    .peek{border:1px solid #d1d5db;background:#f9fafb;border-radius:8px;padding:.5rem .6rem;cursor:pointer}
    .meter{height:8px;background:#eee;border-radius:999px;overflow:hidden}
    #meter-bar{height:100%;width:0%;background:#ef4444;transition:width .25s ease, background .25s ease}
    .hints{margin:.25rem 0 .5rem;padding-left:1.1rem;color:#6b7280;font-size:.9rem}
    .hints li{margin:.15rem 0}
    .btn{padding:.65rem .9rem;border:0;border-radius:8px;background:#00553d;color:#fff;cursor:pointer}
    .btn[disabled]{opacity:.6;cursor:not-allowed}
    .status{min-height:1.25rem;margin-top:.25rem}
    .status.error{color:#b91c1c}
    .status.ok{color:#065f46}
    .back{margin-top:1rem}
  </style>

  <script type="module">
    import { supabase } from '../../lib/supabaseClient.ts';

    const statusEl = document.getElementById('newpass-status');
    const form = document.getElementById('newpass-form');
    const pwd = document.getElementById('password');
    const confirm = document.getElementById('confirm');
    const submit = document.getElementById('submit');
    const meter = document.getElementById('meter-bar');
    const hints = document.getElementById('hints');

    // Turn the URL fragment code into a session (required)
    (async () => {
      try { await supabase.auth.exchangeCodeForSession(window.location.href); } catch (_) {}
    })();

    function strengthReport(val) {
      const reqs = [
        { ok: val.length >= 8, text: 'At least 8 characters' },
        { ok: /[a-z]/.test(val), text: 'Lowercase letter' },
        { ok: /[A-Z]/.test(val), text: 'Uppercase letter' },
        { ok: /\d/.test(val), text: 'Number' },
        { ok: /[^A-Za-z0-9]/.test(val), text: 'Symbol' },
      ];
      const score = reqs.reduce((s, r) => s + (r.ok ? 1 : 0), 0);
      return { score, reqs };
    }

    function paintMeter(score) {
      const pct = Math.min(100, score * 20);
      meter.style.width = pct + '%';
      meter.style.background = score >= 4 ? '#16a34a' : score >= 3 ? '#f59e0b' : '#ef4444';
    }

    function renderHints(reqs, matchesConfirm) {
      hints.innerHTML = '';
      const frag = document.createDocumentFragment();
      reqs.forEach(r => {
        const li = document.createElement('li');
        li.textContent = (r.ok ? '‚úì ' : '‚Ä¢ ') + r.text;
        li.style.color = r.ok ? '#065f46' : '#6b7280';
        frag.appendChild(li);
      });
      const li2 = document.createElement('li');
      li2.textContent = (matchesConfirm ? '‚úì ' : '‚Ä¢ ') + 'Passwords match';
      li2.style.color = matchesConfirm ? '#065f46' : '#6b7280';
      frag.appendChild(li2);
      hints.appendChild(frag);
    }

    function validate() {
      const p = pwd.value;
      const c = confirm.value;
      const { score, reqs } = strengthReport(p);
      paintMeter(score);
      const matches = !!p && p === c;
      renderHints(reqs, matches);
      submit.disabled = !(score >= 4 && matches);
    }

    pwd.addEventListener('input', validate);
    confirm.addEventListener('input', validate);
    validate();

    document.querySelectorAll('.peek').forEach(btn => {
      btn.addEventListener('click', () => {
        const target = document.getElementById(btn.dataset.target);
        const isPwd = target.type === 'password';
        target.type = isPwd ? 'text' : 'password';
        btn.setAttribute('aria-label', isPwd ? 'Hide password' : 'Show password');
      });
    });

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      statusEl.textContent = '';
      statusEl.className = 'status';
      submit.disabled = true;

      try {
        const { error } = await supabase.auth.updateUser({ password: pwd.value });
        if (error) throw error;
        statusEl.textContent = 'Password updated. Redirecting to dashboard‚Ä¶';
        statusEl.classList.add('ok');
        setTimeout(() => window.location.replace('/dashboard'), 900);
      } catch (err) {
        statusEl.textContent = err?.message ?? 'Could not update password';
        statusEl.classList.add('error');
        submit.disabled = false;
      }
    });
  </script>
<script type="module" src={authResetConfirmUrl}></script>
</Layout>
