---
// src/pages/store/index.astro
export const prerender = false;

import Layout from '../../layouts/Layout.astro';
import ProductCard from '../../components/ProductCard.astro';
import ProductBanner from '../../components/ProductBanner.astro';
import TrackPageView from '../../components/TrackPageView.astro';
import { sanity } from '../../lib/sanityClient';

// 1) Categories (for headings + filter options)
const CATS_QUERY = `*[_type=="storeCategory" && defined(slug.current) && !(_id in path("drafts.**"))]{
  _id, title, "slug": slug.current
} | order(title asc)`;

// Common product projection
const PRODUCT_FIELDS = `
  _id, title, "slug": slug.current, sku, shortDescription,
  price, currency, buyUrl, isSubscription, recurringInterval,
  inStock, localPickup, flatShipping, shippingNote,
  shipAustraliaWide, condition, stockQty, tags,
  "category": storeCategory->{_id, title, "slug": slug.current},
  "image": mainImage{ "url": asset->url, "alt": coalesce(alt, "") },
  "gallery": coalesce(gallery[]{ "url": asset->url, "alt": coalesce(alt, "") }, [])
`;

// 2) All products for grouped view (published only)
const PRODUCTS_QUERY = `*[_type=="product" && defined(slug.current) && !(_id in path("drafts.**"))]{
  ${PRODUCT_FIELDS}
} | order(title asc)`;


let categories: any[] = [];
let products: any[] = [];

let fetchError: Error | null = null;

// Fetch everything, but don't fail the whole page if stats error
const [catsRes, prodsRes] = await Promise.allSettled([
  sanity.fetch(CATS_QUERY),
  sanity.fetch(PRODUCTS_QUERY),
]);

if (catsRes.status === 'fulfilled') categories = catsRes.value;
if (prodsRes.status === 'fulfilled') products = prodsRes.value;

if (catsRes.status === 'rejected' || prodsRes.status === 'rejected') {
  fetchError = new Error('Failed to load store content');
}

// Fallback image for cards
const fallbackImage = 'https://placehold.co/800x600';

const toVM = (p: any) => {
  const imageUrl = p?.image?.url ?? p?.gallery?.[0]?.url ?? fallbackImage;
  const hasShipping = (typeof p?.flatShipping === 'number') || !!p?.shipAustraliaWide;
  const pickupOnly = !!p?.localPickup && !hasShipping;
  return {
    ...p,
    imageUrl,
    _catSlug: p?.category?.slug, // only use items that actually have a category
    _hasShipping: hasShipping,
    _pickupOnly: pickupOnly,
    _inStock: p?.inStock !== false
  };
};

const viewModels = (products || []).map(toVM);
// Filter out uncategorised items entirely
const categorised = viewModels.filter((p) => !!p._catSlug);

// Group products by category slug
const grouped: Record<string, { cat: any; items: any[] }> = Object.create(null);
for (const cat of categories) grouped[cat.slug] = { cat, items: [] };
for (const p of categorised) {
  const slug = p._catSlug!;
  if (!grouped[slug]) continue; // skip if category missing from list
  grouped[slug].items.push(p);
}

// Reduce to an array in category order
const groups = categories.map((c) => grouped[c.slug]).filter(Boolean);
---

<Layout title="Store">
  <div class="wrapper">
    <ProductBanner/>

    <!-- Filters -->
    <form class="filters grid" id="store-filters" autocomplete="off">
      <div class="l-6 m-6 s-12">
        <select id="f-category" name="category">
          <option value="all">All categories</option>
          {categories.map((c) => (
            <option value={c.slug}>{c.title}</option>
          ))}
        </select>
      </div>

      <div class="l-2 m-2 s-12 checkwrap">
        <label><input type="checkbox" id="f-ship" /> Available to ship</label>
      </div>

      <div class="l-2 m-2 s-12 checkwrap">
        <label><input type="checkbox" id="f-pickup" /> Pickup only</label>
      </div>

      <div class="l-2 m-2 s-12 checkwrap">
        <label><input type="checkbox" id="f-instock" checked /> In stock only</label>
      </div>
    </form>

    <!-- Product groups -->
    <div id="store-groups">
      {groups.map(({ cat, items }) => (
        <section id={cat.slug} class="group" data-group data-cat={cat.slug}>
          <h2 class="group-title">{cat.title}</h2>

          {items?.length ? (
            <div class="products">
              {items.map((product) => (
                <div
                  class="product"
                  data-cat={product._catSlug}
                  data-ship={product._hasShipping ? '1' : '0'}
                  data-pickup={product.localPickup ? '1' : '0'}
                  data-pickuponly={product._pickupOnly ? '1' : '0'}
                  data-instock={product._inStock ? '1' : '0'}
                >
                  <ProductCard product={product} />
                </div>
              ))}
            </div>
          ) : (
            <p class="empty">No items yet in this category.</p>
          )}
        </section>
      ))}
    </div>
  </div>

  <script is:inline>
    (function () {
      const qs = (s, r = document) => r.querySelector(s);
      const qsa = (s, r = document) => Array.from(r.querySelectorAll(s));

      const elCategory = qs('#f-category');
      const elShip = qs('#f-ship');
      const elPickupOnly = qs('#f-pickup');
      const elInStock = qs('#f-instock');

      const apply = () => {
        const cat = elCategory?.value || 'all';
        const wantShip = !!elShip?.checked;
        const wantPickupOnly = !!elPickupOnly?.checked;
        const wantInStock = !!elInStock?.checked;

        if (wantShip && wantPickupOnly) elPickupOnly.checked = false;

        const groups = qsa('[data-group]');
        groups.forEach((group) => {
          const cards = qsa('.product', group);
          let anyVisible = false;

          cards.forEach((card) => {
            const c = card.getAttribute('data-cat');
            const ship = card.getAttribute('data-ship') === '1';
            const pickOnly = card.getAttribute('data-pickuponly') === '1';
            const instock = card.getAttribute('data-instock') === '1';

            let ok = true;
            if (cat !== 'all' && c !== cat) ok = false;
            if (wantShip && !ship) ok = false;
            if (wantPickupOnly && !pickOnly) ok = false;
            if (wantInStock && !instock) ok = false;

            card.style.display = ok ? '' : 'none';
            if (ok) anyVisible = true;
          });

          group.style.display = anyVisible ? '' : 'none';
        });
      };

      ['change', 'input'].forEach((ev) => {
        document.getElementById('store-filters')?.addEventListener(ev, apply);
      });

      apply();
    })();
  </script>
<TrackPageView key="store" />
</Layout>
