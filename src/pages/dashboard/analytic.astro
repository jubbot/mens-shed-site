---
export const prerender = false;

import Layout from '../../layouts/Dashboard-Layout.astro';
import Tabs from '../../components/dashboard/tabs.astro';
import CategoryPieChart from '../../components/dashboard/CategoryPieChart.astro'
import AuStateMap from '../../components/dashboard/AusStateMap.astro';

// ---------- Server-side: SUMMARY (for charts + KPIs) ----------
let summaryData: any = { ok: false };
let summaryOk = false;
try {
  const base = Astro.url?.origin || '';
  const summaryUrl = new URL('/api/analytics/summary', base);
  summaryUrl.searchParams.set('days', '30'); // default SSR range
  const sRes = await fetch(summaryUrl.toString(), { cache: 'no-store' });
  summaryData = await sRes.json();
  summaryOk = !!summaryData?.ok;
} catch (e) {
  summaryOk = false;
  summaryData = { ok: false, error: (e as Error)?.message ?? String(e) };
}

// ---------- Server-side: TOP LISTS (for products/projects/whatson) ----------
const base = Astro.url.origin;
const topRes  = await fetch(`${base}/api/analytics/top-all?limit=10`, { cache: 'no-store' });
const topData = topRes.ok ? await topRes.json() : { ok: false };

const products = topData?.products ?? [];
const projects = topData?.projects ?? [];
const whatson  = topData?.whatson  ?? [];

// Option A: dummy counts now (inline)
const counts = { QLD:420, NSW:180, VIC:240, WA:120, SA:60, TAS:15, NT:9, ACT:22 };

---

<Layout title="Analytics Dashboard">
  <div class="wrapper dash">
    <div class="dash__topbar">
      <div class="dash__title">
        <h1>Analytics</h1>
        <p class="muted">Traffic and engagement across products, projects, and pages</p>
      </div>

      <div class="dash__controls">
        <label class="control">
          <span>Range</span>
          <select id="rangeDays" aria-label="Date range">
            <option value="7">7 days</option>
            <option value="30" selected>30 days</option>
            <option value="60">60 days</option>
            <option value="90">90 days</option>
          </select>
        </label>
      </div>
    </div>

 
 
   <AuStateMap title="Visitors by State" counts={counts} svgUrl="images/maps/au-states.svg" />
   
 
  <CategoryPieChart/>
  
    <section>
    <div class="header">
        <h2>Top Page Views</h2>
        <button id="exportCsv" class="btn btn-delta" type="button"><i class="wt-file1"></i> Export CSV </button>
        </div>
    <div class="grid">
        <div class="l-6 m-6 s-12">
            <div class="panel">
 <h3><i class="wt-bag"></i>  Products</h3>
      {products.length ? (
        <ol class="toplist">
          {products.map((p: any) => (
            <li class="row">
              {p.thumb && <img class="thumb" src={p.thumb} alt={p.title} loading="lazy" />}
              <a class="title" href={p.href}>{p.title}</a>
              <span class="count">{p.views.toLocaleString('en-AU')}</span>
            </li>
          ))}
        </ol>
      ) : <p class="muted">No product views yet.</p>}
            
          
        </div>
        </div>

        <div class="l-6 m-6 s-12">
            <div class="panel">
            <h3><i class="wt-cube"></i> Projects</h3>
      {projects.length ? (
        <ol class="toplist">
          {projects.map((p: any) => (
            <li class="row">
              {p.thumb && <img class="thumb" src={p.thumb} alt={p.title} loading="lazy" />}
              <a class="title" href={p.href}>{p.title}</a>
              <span class="count">{p.views.toLocaleString('en-AU')}</span>
            </li>
          ))}
        </ol>
      ) : <p class="muted">No project views yet.</p>}
            </div>
        </div>
    </div>
    </section>

    <section>
           <div class="grid">
           <div class="l-6 m-6 s-12">
            <div class="panel">
                 <h3><i class="wt-mountain"></i> What’s On</h3>
      {whatson.length ? (
        <ol class="toplist">
          {whatson.map((p: any) => (
            <li class="row">
              {p.thumb && <img class="thumb" src={p.thumb} alt={p.title} loading="lazy" />}
              <a class="title" href={p.href}>{p.title}</a>
              <span class="count">{p.views.toLocaleString('en-AU')}</span>
            </li>
          ))}
        </ol>
      ) : <p class="muted">No What’s On views yet.</p>}
            </div>
        </div>

             <div class="l-6 m-6 s-12">
            <div class="panel">
            <h3><i class="wt-sitepage"></i> Pages</h3>
            <ol id="topPages" class="toplist">
              {summaryOk && Array.isArray(summaryData?.topPages)
                ? summaryData.topPages.map((r: any) => <li class="row"><span class="title">{r.key}</span><div class="count">{r.total}</div></li>)
                : <li class="muted">—</li>
              }
            </ol> 
            </div>
        </div>
    </div>
    </section>
    <Tabs/>
  </div>

  <!-- Seed data for client hydration (SUMMARY ONLY) -->
  <script type="application/json" id="analytics-seed">
    {JSON.stringify(summaryOk ? summaryData : { ok:false })}
  </script>

  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>

  <!-- Client controller -->
  <script is:inline>
    (function(){
      const seed = document.getElementById('analytics-seed')?.textContent || '{}';
      let state = {};
      try { state = JSON.parse(seed); } catch {}

      const $ = (s, r=document) => r.querySelector(s);

      const elKinds  = $('#kindsChart');
      const elPages  = $('#pagesChart');
      const elTop    = $('#topChart');
      const selRange = $('#rangeDays');
      const btnRef   = $('#refreshBtn');
      const formPage = $('#pageForm');
      const elRangeL = $('#rangeLabel');
      const elLU     = $('#lastUpdated');

      const kpiProd  = $('#kpiProducts');
      const kpiProj  = $('#kpiProjects');
      const kpiPage  = $('#kpiPages');
      const kpiStore = $('#kpiStore');

      let kindsChart = null;
      let pagesChart = null;
      let topChart   = null;

      function renderKpis(d){
        if (!d?.ok) return;
        kpiProd.textContent  = String(d.totals?.productViews ?? 0);
        kpiProj.textContent  = String(d.totals?.projectViews ?? 0);
        kpiPage.textContent  = String(d.totals?.pageViews ?? 0);
        kpiStore.textContent = String(d.pageTotals?.store ?? 0);
      }

      function renderTop(d){
        const ul = $('#topPages');
        if (!ul) return;
        ul.innerHTML = '';
        const top = d?.topPages || [];
        if (!top.length) {
          const li = document.createElement('li');
          li.className = 'muted';
          li.textContent = '—';
          ul.appendChild(li);
          return;
        }
        top.forEach(r => {
          const li = document.createElement('li');
          const name = document.createElement('span');
          name.textContent = r.key;
          const val = document.createElement('strong');
          val.textContent = String(r.total);
          li.appendChild(name); li.appendChild(val);
          ul.appendChild(li);
        });
      }

      function renderCharts(d){
        if (!window.Chart || !d?.ok) return;

        // Kinds line
        const days = d.series?.kinds?.days || [];
        kindsChart && kindsChart.destroy();
        kindsChart = new Chart(elKinds, {
          type: 'line',
          data: {
            labels: days,
            datasets: [
              { label: 'Products', data: d.series.kinds.product, tension: 0.25, fill: false },
              { label: 'Projects', data: d.series.kinds.project, tension: 0.25, fill: false },
              { label: 'Pages (all)', data: d.series.kinds.page, tension: 0.25, fill: false },
            ]
          },
          options: {
            responsive: true,
            interaction: { mode: 'index', intersect: false },
            scales: { x: { ticks: { maxTicksLimit: 10 }}, y: { beginAtZero: true } }
          }
        });

        // Pages line
        pagesChart && pagesChart.destroy();
        const pDays = d.series?.pages?.days || [];
        const keys = Object.keys(d.series?.pages || {}).filter(k => k !== 'days');
        pagesChart = new Chart(elPages, {
          type: 'line',
          data: {
            labels: pDays,
            datasets: keys.map(k => ({ label: k, data: d.series.pages[k], tension: 0.25, fill: false }))
          },
          options: {
            responsive: true,
            interaction: { mode: 'index', intersect: false },
            scales: { x: { ticks: { maxTicksLimit: 10 }}, y: { beginAtZero: true } }
          }
        });

        // Top pages bar
        topChart && topChart.destroy();
        const top = d.topPages || [];
        topChart = new Chart(elTop, {
          type: 'bar',
          data: {
            labels: top.map(r => r.key),
            datasets: [{ label: 'Top pages', data: top.map(r => r.total) }]
          },
          options: { indexAxis: 'y', responsive: true, scales: { x: { beginAtZero: true } } }
        });
      }

      function applyMeta(d){
        if (d?.range) {
          elRangeL.textContent = `${d.range.startDay} → ${d.range.endDay}`;
        }
        elLU.textContent = new Date().toLocaleString();
      }

      // Export CSV for the "pages" series
      $('#exportCsv')?.addEventListener('click', () => {
        const d = state;
        if (!d?.ok) return;
        const days = d.series.pages.days;
        const keys = Object.keys(d.series.pages).filter(k => k !== 'days');
        const rows = [['day', ...keys]];
        days.forEach((day, i) => {
          rows.push([day, ...keys.map(k => d.series.pages[k][i] ?? 0)]);
        });
        const csv = rows.map(r => r.join(',')).join('\n');
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = `pages-${(new Date()).toISOString().slice(0,10)}.csv`;
        a.click();
      });

      function currentPages(){
        return Array.from(document.querySelectorAll('#pageForm input[name="page"]:checked'))
          .map((i) => (i as HTMLInputElement).value);
      }

      async function loadAndRender(){
        const days = (document.getElementById('rangeDays') as HTMLSelectElement).value || '30';
        const pages = currentPages();
        const url = new URL('/api/analytics/summary', window.location.origin);
        url.searchParams.set('days', String(days));
        if (pages.length) url.searchParams.set('pages', pages.join(','));
        const res = await fetch(url.toString(), { cache: 'no-store' });
        const d = await res.json();
        if (!d?.ok) return;

        state = d;
        renderKpis(d);
        renderCharts(d);
        renderTop(d);
        applyMeta(d);
      }

      // Initial hydrate from server data
      if ((state as any)?.ok) {
        renderKpis(state);
        renderCharts(state);
        renderTop(state);
        applyMeta(state);
      }

      // Interactions
      document.getElementById('refreshBtn')?.addEventListener('click', loadAndRender);
      document.getElementById('rangeDays')?.addEventListener('change', loadAndRender);
      document.getElementById('pageForm')?.addEventListener('change', loadAndRender);
    })();
  </script>
</Layout>
