<!doctype html>
<meta charset="utf-8" />
<title>Tier Sync Test</title>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<style>
  /* minimal layout + slide */
  .track { display:grid; grid-auto-flow:column; grid-auto-columns:100%; transition:transform .25s ease; }
  .pane  { box-sizing:border-box; padding:16px; }
  /* view toggles: form view slides left by 100% */
  #tiers-view-form:checked ~ .tiers .track { transform: translateX(-100%); }

  /* simple visuals */
  .card { padding:12px; border:1px solid #ddd; border-radius:8px; margin:12px 0; }
  .btn { display:inline-block; padding:.5rem .75rem; border-radius:8px; background:#2a7a2a; color:#fff; cursor:pointer; user-select:none; }
  .choice { display:flex; gap:.5rem; align-items:center; margin:.25rem 0; }
  .row { display:grid; gap:.5rem; }
  .muted { color:#666; font-size:.95rem; }
</style>

<!-- Hidden view toggles (order matters: must be before .tiers) -->
<input id="tiers-view-tiers" class="toggle" name="tiers-view" type="radio" checked hidden />
<input id="tiers-view-form"  class="toggle" name="tiers-view" type="radio" hidden />

<div id="tiers">
  <div class="tiers">
    <div class="track">
      <!-- Pane A (cards) -->
      <section class="pane">
        <h2>Pane A — choose a tier</h2>

        <!-- Bronze -->
        <input class="tier-radio" id="tiers-bronze" name="tiers-choice" type="radio" checked />
        <div class="tier-block card" data-tier="bronze" data-tier-name="Bronze">
          <label class="tier-tab" for="tiers-bronze"><strong>Bronze</strong></label>
          <p class="muted">Great starter support.</p>
          <div class="row">
            <span>Logo on website</span>
            <span>Social shout-out</span>
          </div>
          <label class="btn enquire" for="tiers-view-form">Enquire</label>
        </div>

        <!-- Silver -->
        <input class="tier-radio" id="tiers-silver" name="tiers-choice" type="radio" />
        <div class="tier-block card" data-tier="silver" data-tier-name="Silver">
          <label class="tier-tab" for="tiers-silver"><strong>Silver</strong></label>
          <p class="muted">Step up your impact.</p>
          <div class="row">
            <span>All Bronze perks</span>
            <span>Sponsor board logo</span>
          </div>
          <label class="btn enquire" for="tiers-view-form">Enquire</label>
        </div>

        <!-- Gold -->
        <input class="tier-radio" id="tiers-gold" name="tiers-choice" type="radio" />
        <div class="tier-block card" data-tier="gold" data-tier-name="Gold">
          <label class="tier-tab" for="tiers-gold"><strong>Gold</strong></label>
          <p class="muted">High visibility.</p>
          <div class="row">
            <span>All Silver perks</span>
            <span>Newsletter feature</span>
          </div>
          <label class="btn enquire" for="tiers-view-form">Enquire</label>
        </div>

        <!-- Partner -->
        <input class="tier-radio" id="tiers-partner" name="tiers-choice" type="radio" />
        <div class="tier-block card" data-tier="partner" data-tier-name="Project Partner">
          <label class="tier-tab" for="tiers-partner"><strong>Project Partner</strong></label>
          <p class="muted">Co-brand a build.</p>
          <div class="row">
            <span>Co-branded project</span>
            <span>Volunteer day</span>
          </div>
          <label class="btn enquire" for="tiers-view-form">Enquire</label>
        </div>

        <!-- hidden field you might submit -->
        <input name="tierSlug" type="hidden" />
      </section>

      <!-- Pane B (form radios mirror Pane A) -->
      <section class="pane">
        <h2 id="tiers-form-title">Pane B — radios mirror your choice</h2>
        <fieldset>
          <legend>Interested Tier</legend>
          <label class="choice"><input type="radio" name="tiers-form-tier" value="bronze" /> Bronze</label>
          <label class="choice"><input type="radio" name="tiers-form-tier" value="silver" /> Silver</label>
          <label class="choice"><input type="radio" name="tiers-form-tier" value="gold" /> Gold</label>
          <label class="choice"><input type="radio" name="tiers-form-tier" value="partner" /> Project Partner</label>
        </fieldset>

        <label class="btn" for="tiers-view-tiers">Back to cards</label>
      </section>
    </div>
  </div>
</div>

<script>
(() => {
  // Root & expected names (match your Astro rendering)
  const ROOT   = 'tiers';
  const A_NAME = `${ROOT}-choice`;      // Pane A radios -> "tiers-choice"
  const B_NAME = `${ROOT}-form-tier`;   // Pane B radios -> "tiers-form-tier"

  const root = document.getElementById(ROOT);
  if (!root) return;

  const tabs      = [...root.querySelectorAll('.tier-tab')];
  const slugField = root.querySelector('input[name="tierSlug"]');

  // Derive slug from Pane A radio id "tiers-<slug>" (robust even if DOM wraps)
  const slugFromCardRadio = (r) => {
    if (!r || !r.id) return '';
    const prefix = `${ROOT}-`;
    return r.id.startsWith(prefix) ? r.id.slice(prefix.length) : '';
  };

  const getCheckedCard = () =>
    root.querySelector(`input.tier-radio[name="${A_NAME}"]:checked`);

  const checkFormBySlug = (slug) => {
    if (!slug) return;
    const fr = root.querySelector(`input[name="${B_NAME}"][value="${slug}"]`);
    if (fr) fr.checked = true;
    if (slugField) slugField.value = slug;
  };

  const checkCardBySlug = (slug) => {
    if (!slug) return;
    const cr = root.querySelector(`#${ROOT}-${slug}`);
    if (cr && cr.type === 'radio') cr.checked = true;
  };

  const syncTabs = () => {
    const cards = [...root.querySelectorAll(`input.tier-radio[name="${A_NAME}"]`)];
    cards.forEach((r,i)=> tabs[i]?.setAttribute('aria-selected', r.checked ? 'true' : 'false'));
  };

  const syncPaneBFromPaneA = () => {
    const slug = slugFromCardRadio(getCheckedCard());
    checkFormBySlug(slug);
    syncTabs();
  };

  // A) Pane A change -> mirror Pane B
  root.addEventListener('change', (e) => {
    const t = e.target;
    if (t instanceof HTMLInputElement && t.type === 'radio' && t.name === A_NAME) {
      syncPaneBFromPaneA();
    }
  });

  // B) Pane B change -> mirror Pane A
  root.addEventListener('change', (e) => {
    const t = e.target;
    if (t instanceof HTMLInputElement && t.type === 'radio' && t.name === B_NAME) {
      checkCardBySlug(t.value);
      syncTabs();
    }
  });

  // C) Enquire label: capture phase so we sync BEFORE the slide occurs
  root.addEventListener('pointerdown', (e) => {
    const btn = (e.target instanceof Element) ? e.target.closest('.enquire') : null;
    if (!btn) return;
    const block = btn.closest('.tier-block');
    // prefer to mirror by the radio id next to the block
    const cardRadio = block ? block.previousElementSibling : null;
    const slug = slugFromCardRadio(cardRadio);
    if (slug) { checkCardBySlug(slug); checkFormBySlug(slug); syncTabs(); }
  }, true);

  // Keyboard activation on Enquire (Space/Enter) — also in capture
  root.addEventListener('keydown', (e) => {
    const el = (e.target instanceof Element) ? e.target.closest('.enquire') : null;
    if (!el) return;
    if (e.key === ' ' || e.key === 'Enter') {
      const block = el.closest('.tier-block');
      const cardRadio = block ? block.previousElementSibling : null;
      const slug = slugFromCardRadio(cardRadio);
      if (slug) { checkCardBySlug(slug); checkFormBySlug(slug); syncTabs(); }
    }
  }, true);

  // Initial mirror (Bronze by default)
  syncPaneBFromPaneA();
})();
</script>
