---
interface MapOfArrays { [key: string]: string[] }

interface Props {
  title?: string;
  store?: MapOfArrays;
  projects?: MapOfArrays;
  whatson?: MapOfArrays; // cards by category
}

const {
  title = "Top Category Views",
  store = {
    Woodworking: ["Hand Tools","Power Tools","Finishes","Hardware","Plans","Jigs"],
    Metalwork:   ["Fasteners","Sheet","Profiles","Welding"],
    Electronics: ["Kits","Components","Soldering","Tools","Test Gear"],
    Crafts:      ["Sewing","Leather","Paint"],
    Garden:      ["Plants","Tools"],
  },
  projects = {
    Furniture:   ["Chairs","Tables","Cabinets","Beds","Outdoor"],
    Restoration: ["Wood","Metal","Electronics"],
    Community:   ["Benches","Planters","Noticeboards","BBQ Trailers"],
    Custom:      ["Engraving","Laser","3D Prints","CNC","Prototypes"],
  },
  whatson = {
    Workshops: ["Intro Woodwork","Laser Basics","Soldering 101","CNC 101","Lathe Safety"],
    Social:    ["BBQ Night","Coffee Morning","Trivia Arvo"],
    Fundraising:["Bunnings Sausage Sizzle","Garage Sale"],
    Community: ["RSL Repair Day","Men's Health Talk","Park Clean Up"],
  },
} = Astro.props;

const uid = `tcv-${Math.random().toString(36).slice(2,9)}`;
const STORE_ATTR    = encodeURIComponent(JSON.stringify(store));
const PROJECTS_ATTR = encodeURIComponent(JSON.stringify(projects));
const WHATSON_ATTR  = encodeURIComponent(JSON.stringify(whatson));
---

<section class="tcv" id={uid}>
  <div class="header">
    <h2>{title}</h2>
    <button id={`${uid}-export`} class="btn btn-delta" type="button">
      <i class="wt-file1"></i> Export CSV
    </button>
  </div>

  <div class="grid">
    <div class="l-4 m-4 s-12">
      <div class="panel">
        <div class="subheading">
          <h3><i class="wt-storagedrive"></i> Store</h3>
          <div class="count" data-for="Store">0</div>
          </div>
        
        <div class="chart" data-source="Store" data-map={STORE_ATTR}></div>
      </div>
    </div>

    <div class="l-4 m-4 s-12">
      <div class="panel">
        <div class="subheading">
          <h3><i class="wt-storagedrive"></i> Projects</h3>
        <div class="count" data-for="Projects">0</div>
        </div>
        <div class="chart" data-source="Projects" data-map={PROJECTS_ATTR}></div>
      </div>
    </div>

    <div class="l-4 m-4 s-12">
      <div class="panel">
          <div class="subheading">
        <h3><i class="wt-storagedrive"></i> What’s on</h3>
        <div class="count" data-for="What’s on">0</div>
        </div>
        <div class="chart" data-source="What’s on" data-map={WHATSON_ATTR}></div>
      </div>
    </div>
  </div>

 

  <script is:inline data-root={uid}>
  (() => {
    const rootId = document.currentScript?.dataset?.root;
    const root = rootId ? document.getElementById(rootId) : null;
    if (!root) return;

    const palette = [
  "#5f853a",
  "#659437",
  "#84c246",
  "#9ae251",
  "#b2fc68",
  "#5f853a", // brand base
  "#538323",
  "#43681e",
  "#556843",
  "#288228"
];

    const decodeMap = (el) => {
      try { return JSON.parse(decodeURIComponent(el.dataset.map||"{}")) || {} } catch { return {} }
    };
    const toSeries = (obj) => Object.entries(obj).map(([label, arr]) => ({ label, value: Array.isArray(arr) ? arr.length : 0 }));
    const sum = (a,f=d=>d)=>a.reduce((x,d)=>x+f(d),0);

    const arcPath = (cx,cy,rO,rI,a0,a1) => {
      const large = a1 - a0 > Math.PI ? 1 : 0;
      const sx = cx + rO*Math.cos(a0), sy = cy + rO*Math.sin(a0);
      const ex = cx + rO*Math.cos(a1), ey = cy + rO*Math.sin(a1);
      if (rI<=0) return `M ${cx} ${cy} L ${sx} ${sy} A ${rO} ${rO} 0 ${large} 1 ${ex} ${ey} Z`;
      const isx = cx + rI*Math.cos(a1), isy = cy + rI*Math.sin(a1);
      const iex = cx + rI*Math.cos(a0), iey = cy + rI*Math.sin(a0);
      return `M ${sx} ${sy} A ${rO} ${rO} 0 ${large} 1 ${ex} ${ey} L ${isx} ${isy} A ${rI} ${rI} 0 ${large} 0 ${iex} ${iey} Z`;
    };

    function drawPie(container, series) {
      const data = series.filter(d=>d.value>0);
      if (!data.length) { container.textContent = "No data"; return 0; }

      const total = sum(data, d=>d.value);
      const size=220, cx=size/2, cy=size/2, rO=100, rI=58, pad=0.015;

      const svg = document.createElementNS("http://www.w3.org/2000/svg","svg");
      svg.setAttribute("viewBox", `0 0 ${size} ${size}`);
      svg.setAttribute("role","img");
      svg.setAttribute("aria-label", `Pie chart – ${total} total`);

      let a = -Math.PI/2;
      data.forEach((d,i) => {
        const frac = d.value/total;
        const sweep = Math.max(0, frac*Math.PI*2 - pad);
        const start = a + pad/2, end = start + sweep; a += frac*Math.PI*2;

        const p = document.createElementNS(svg.namespaceURI,"path");
        p.setAttribute("d", arcPath(cx,cy,rO,rI,start,end));
        const col = palette[i % palette.length];
        p.setAttribute("fill", col);
        p.setAttribute("stroke", "#fff");
        p.setAttribute("stroke-width", "1");
        p.classList.add("slice");
        p.setAttribute("aria-label", `${d.label}: ${d.value}`);
        svg.appendChild(p);
      });

      // legend
      const legend = document.createElement("div");
      legend.className = "legend";
      data.forEach((d,i) => {
        const row = document.createElement("div"); row.className="item";
        const label = document.createElement("div"); label.className="label";
        const sw = document.createElement("span"); sw.className="swatch"; sw.style.background = palette[i % palette.length];
        const txt = document.createElement("span"); txt.textContent = d.label;
        const val = document.createElement("div"); val.className="value"; val.textContent = d.value;
        label.appendChild(sw); label.appendChild(txt);
        row.appendChild(label); row.appendChild(val);
        legend.appendChild(row);
      });

      container.innerHTML = "";
      container.appendChild(svg);
      container.appendChild(legend);

      return total;
    }

    // render charts and fill the per-panel counts
    function render() {
      root.querySelectorAll(".chart").forEach(chart => {
        const src = chart.dataset.source || "";
        const map = decodeMap(chart);
        const series = toSeries(map);
        const total = sum(series, d=>d.value);
        drawPie(chart, series);

        // find the count element in the same panel (by data-for=src)
        const panel = chart.closest(".panel");
        const countEl = panel?.querySelector(`.count[data-for="${src}"]`);
        if (countEl) {
          countEl.textContent = String(total);
          countEl.setAttribute("aria-label", `${src} total: ${total}`);
        }
      });
    }

    // CSV export for all three charts
    function toCsv(rows){ return rows.map(r=>r.map(v=>{
      const s=String(v??""); return /[",\n]/.test(s)?`"${s.replace(/"/g,'""')}"`:s;
    }).join(",")).join("\n"); }

    function exportCsv() {
      const rows = [["Source","Category","Count"]];
      root.querySelectorAll(".chart").forEach(b => {
        const src = b.dataset.source || "";
        const map = decodeMap(b);
        Object.entries(map).forEach(([cat, arr]) => rows.push([src, cat, Array.isArray(arr)?arr.length:0]));
      });
      const csv = toCsv(rows);
      const blob = new Blob([csv], { type: "text/csv;charset=utf-8" });
      const a = document.createElement("a");
      a.href = URL.createObjectURL(blob);
      a.download = "top-category-views.csv";
      document.body.appendChild(a); a.click(); a.remove();
      URL.revokeObjectURL(a.href);
    }

    const go = () => {
      render();
      document.getElementById(`${root.id}-export`)?.addEventListener("click", exportCsv);
    };
    if (document.readyState === "loading") document.addEventListener("DOMContentLoaded", go);
    else go();
  })();
  </script>
</section>
