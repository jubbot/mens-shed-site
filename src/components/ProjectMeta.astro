---
interface Member { firstName?: string; lastName?: string; _id?: string }
type Slugish = string | { current?: string };

interface Project {
  slug?: Slugish;
  jobId?: string;
  materials?: string[];
  woodTools?: string[];
  metalTools?: string[];
  tools?: string[];       // backward-compat
  assignees?: Member[];
  volunteers?: number;
  views?: number;         // optional legacy Sanity field (displayed if present)
}

const { project } = Astro.props as { project: Project };

// Resolve slug string from object or string
const slugStr =
  typeof project?.slug === 'string'
    ? project.slug
    : (project?.slug?.current ?? '').trim();

// strings/arrays
const jobId = (project?.jobId ?? '').trim();
const wood = Array.isArray(project?.woodTools) ? project.woodTools.filter(Boolean) : [];
const metal = Array.isArray(project?.metalTools) ? project.metalTools.filter(Boolean) : [];
const combinedTools = [...new Set([ ...wood, ...metal, ...((project?.tools ?? []) as string[]) ])].filter(Boolean);
const materials = Array.isArray(project?.materials) ? project.materials.filter(Boolean) : [];

const assignees = Array.isArray(project?.assignees) ? project.assignees : [];
const names = assignees
  .map(m => `${m.firstName ?? ''} ${m.lastName ?? ''}`.trim())
  .filter(Boolean);

// numbers (show 0 as 0, hide only if null/undefined)
const volunteers = Number.isFinite(project?.volunteers as number) ? Number(project!.volunteers) : null;
const views = Number.isFinite(project?.views as number) ? Number(project!.views) : null;

const nf = (n: number) => n.toLocaleString('en-AU');
---

<!-- Attach data-project-slug so the script can read it -->
<div class="project-meta" data-project-slug={slugStr || ''}>
  {jobId && (
    <div class="item">
      <label><i class="wt-clipboard"></i>Job ID</label>
      <div class="mono id-row">
        <span>{jobId}</span>
        <button class="btn-copy" type="button" aria-label="Copy Job ID" data-copy={jobId}><i class="wt-copy"></i> Copy</button>
      </div>
    </div>
  )}

  {(volunteers !== null || views !== null) && (
    <div class="item">
      <label><i class="wt-chart"></i> Project stats</label>
      <div class="stats">
        {volunteers !== null && (
          <span class="pill" title="Volunteers">{nf(volunteers)} volunteer{volunteers === 1 ? '' : 's'}</span>
        )}
        {views !== null && (
          <span class="pill" title="Views">
            <span data-views-count class="mono">{nf(views)}</span> view{views === 1 ? '' : 's'}
          </span>
        )}
        {views === null && slugStr && (
          <span class="pill" title="Views">
            <span data-views-count class="mono">â€”</span> views
          </span>
        )}
      </div>
    </div>
  )}

  {combinedTools.length > 0 && (
    <div class="item">
      <label><i class="wt-cube"></i> Tools &amp; Machinery Used</label>
      <ul class="chips" role="list">
        {combinedTools.map(t => <li class="chip">{t}</li>)}
      </ul>
    </div>
  )}

  {materials.length > 0 && (
    <div class="item">
      <label><i class="wt-cube"></i>  Materials Used</label>
      <ul class="chips" role="list">
        {materials.map(m => <li class="chip">{m}</li>)}
      </ul>
    </div>
  )}

  {names.length > 0 && (
    <div class="item">
      <label><i class="wt-users"></i>  Assigned Members</label>
      <ul class="chips" role="list">
        {names.map(n => <li class="chip">{n}</li>)}
      </ul>
    </div>
  )}
</div>

<script is:inline>
  // copy-to-clipboard for the Job ID
  document.addEventListener('click', (e) => {
    const btn = (e.target)?.closest?.('.btn-copy');
    if (!btn) return;
    const value = btn.getAttribute('data-copy') || '';
    if (!value) return;
    navigator.clipboard?.writeText(value).then(() => {
      const orig = btn.textContent;
      btn.textContent = 'Copied!';
      setTimeout(() => { btn.textContent = orig || 'Copy'; }, 1200);
    });
  });

  // View tracking + live refresh from analytics
  (function(){
    const root = document.querySelector('.project-meta');
    const slug = root?.getAttribute('data-project-slug');
    if (!slug) return;

    // Optimistic UI bump only if we rendered a numeric value
    const el = root.querySelector('[data-views-count]');
    const hadNumber = el && /^\d/.test((el.textContent || '').trim());

    // Throttle: once per tab session per slug
    const seenKey = 'pv_project_' + slug;
    const firstTimeThisSession = !sessionStorage.getItem(seenKey);
    if (firstTimeThisSession) {
      sessionStorage.setItem(seenKey, '1');
      // optimistic +1 if we had a number
      if (hadNumber) {
        const raw = (el.textContent || '0').replace(/,/g,'');
        const n = parseInt(raw, 10);
        if (!Number.isNaN(n)) {
          const next = (n + 1);
          // format AU
          try { el.textContent = next.toLocaleString('en-AU'); } catch { el.textContent = String(next); }
        }
      }
      // fire-and-forget tracking
      fetch('/api/analytics/track?kind=project&key=' + encodeURIComponent(slug), { cache: 'no-store' })
        .catch(() => {});
    }

    // Always try to refresh from /api/analytics/item (if present),
    // so even when we didn't render a starting number we can fill it in.
    fetch('/api/analytics/item?kind=project&key=' + encodeURIComponent(slug), { cache: 'no-store' })
      .then(r => r.ok ? r.json() : null)
      .then(d => {
        if (!d || !d.ok || typeof d.total !== 'number' || !el) return;
        try { el.textContent = d.total.toLocaleString('en-AU'); }
        catch { el.textContent = String(d.total); }
      })
      .catch(() => {});
  })();
</script>
