---
import { sanity } from "../lib/sanityClient";
import EventCard from "./EventCard.astro";

interface Props {
  heading?: string;
  limit?: number;              // default 3
  viewAllHref?: string;        // default "/whats-on"
  showViewAll?: boolean;       // default true
  detailBaseHref?: string;     // where event details live; default "/whats-on"
}

const {
  heading = "Recent events",
  limit = 3,
  viewAllHref = "/whats-on",
  showViewAll = true,
  detailBaseHref = "/whats-on",
} = Astro.props as Props;

// Fetch most recent whatsOn items by startTime (fallback _createdAt)
const QUERY = `*[_type == "whatsOn" && defined(slug.current)]
| order(coalesce(dateTime(startTime), _createdAt) desc) [0...$limit]{
  "slug": slug.current,
  _id,
  title,
  location,
  startTime,
  endTime,
  description,
  hasSeatLimit,
  seatCapacity,
  seatsReserved,
  allowWaitlist,
  // Thumbnails shaped the way EventCard.toUrlAlt() expects:
  "firstThumbnail": select(
    defined(firstThumbnail.asset) => {
      "asset": { "url": firstThumbnail.asset->url },
      "alt": coalesce(firstThumbnail.alt, "")
    },
    null
  ),
  "secondThumbnail": select(
    defined(secondThumbnail.asset) => {
      "asset": { "url": secondThumbnail.asset->url },
      "alt": coalesce(secondThumbnail.alt, "")
    },
    null
  )
}`;

let rows: any[] = [];
try {
  rows = await sanity.fetch(QUERY, { limit });
} catch (e) {
  console.error("RecentEvents fetch failed:", e);
  rows = [];
}

// Normalize each row into the shape EventCard expects
const events = (rows ?? []).map((r) => {
  const hasSeatLimit = !!r.hasSeatLimit;
  const cap = Number(r.seatCapacity ?? 0);
  const res = Number(r.seatsReserved ?? 0);
  const spotsLeft = hasSeatLimit ? Math.max(0, cap - res) : null;
  const isSoldOut = hasSeatLimit ? (spotsLeft ?? 0) <= 0 : false;

  return {
    ...r,
    // EventCard checks event.slug.current in a couple of places:
    slug: { current: r.slug },
    // Ensure the card links to the correct route without touching EventCard:
    ctaUrl: `${detailBaseHref}/${r.slug}`,
    // Provide optional helpers EventCard will read if present
    spotsLeft,
    isSoldOut,
  };
});
---

<section class="recent-events">
  <div class="re-head">
    <h2>{heading}</h2>
    {showViewAll && <a class="re-all" href={viewAllHref}>View all</a>}
  </div>

  {events.length ? (
    <ul class="re-list" role="list">
      {events.map((ev) => (
        <li class="re-item" data-event={ev.slug.current ?? ev._id}>
          <EventCard event={ev} />
        </li>
      ))}
    </ul>
  ) : (
    <div class="re-empty" role="status" aria-live="polite">
      No recent events.
    </div>
  )}
</section>