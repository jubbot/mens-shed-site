---
/**
 * ProductCard.astro
 * Props: { product: Product }
 */

type Interval = 'month' | 'year' | string;

interface ProductImage { url?: string; alt?: string }
interface Product {
  _id: string;
  title: string;
  slug?: string;
  sku?: string;
  shortDescription?: string;
  price?: number;                 // AUD
  currency?: string;              // e.g. 'AUD'
  buyUrl?: string;                // Stripe Payment Link
  isSubscription?: boolean;
  recurringInterval?: Interval;   // 'month' | 'year'
  inStock?: boolean;              // default true
  localPickup?: boolean;
  flatShipping?: number;          // AUD
  shippingNote?: string;
  image?: ProductImage;
  imageUrl?: string;              // convenience field from the /store page
  gallery?: ProductImage[];
  // optional: set by /store page
  category?: { slug?: string } | null;
  _catSlug?: string;
}

const { product } = Astro.props as { product: Product };

// Build details URL (works with or without category)
const catSlug = (product as any)?._catSlug || product?.category?.slug;
const detailsUrl = product?.slug
  ? (catSlug ? `/store/${catSlug}/${product.slug}` : `/store/${product.slug}`)
  : undefined;

const currency = product.currency || 'AUD';
const hasPrice = typeof product.price === 'number' && Number.isFinite(product.price);
const isFree = hasPrice && (product.price! <= 0);
const isDonation = !hasPrice && /donat(e|ion)/i.test(product.title || '');

const inStock = product.inStock !== false; // default true
const isSubscription = !!product.isSubscription;
const interval = (product.recurringInterval || '').toLowerCase() as Interval;

const imageUrl =
  product.imageUrl ||
  product.image?.url ||
  product.gallery?.[0]?.url ||
  'https://placehold.co/800x600?text=Product';

const imageAlt =
  product.image?.alt ||
  product.gallery?.[0]?.alt ||
  product.title ||
  'Product image';

const toMoney = (value: number, cur = currency) =>
  new Intl.NumberFormat('en-AU', { style: 'currency', currency: cur }).format(value);

const priceLabel = hasPrice
  ? (isFree ? 'Free' : toMoney(product.price!))
  : (isDonation ? 'Your amount' : '');

const subSuffix = isSubscription
  ? (interval === 'month' ? '/month' : interval === 'year' ? '/year' : '/billing')
  : '';

const hasShipping = (typeof product.flatShipping === 'number') || !!(product as any).shipAustraliaWide;
const pickupOnly = !!product.localPickup && !hasShipping;

const shippingBadges: string[] = [];
if (pickupOnly) {
  shippingBadges.push('Pickup only');
} else {
  if (product.localPickup) shippingBadges.push('Local pickup');
  if (typeof product.flatShipping === 'number') {
    shippingBadges.push(product.flatShipping > 0 ? `Flat shipping ${toMoney(product.flatShipping)}` : 'Free shipping');
  } else if ((product as any).shipAustraliaWide) {
    shippingBadges.push('Ships Australia-wide');
  }
}
if (product.shippingNote) shippingBadges.push(product.shippingNote);

const ctaText = isSubscription
  ? 'Subscribe'
  : isDonation
    ? 'Donate'
    : hasPrice
      ? 'Buy now'
      : 'Pay now';

const canBuy = !!product.buyUrl && inStock;

// Basic Product structured data (only if we have a price)
const ldJson = hasPrice ? {
  '@context': 'https://schema.org',
  '@type': 'Product',
  name: product.title,
  sku: product.sku,
  image: imageUrl,
  offers: {
    '@type': 'Offer',
    priceCurrency: currency,
    price: product.price,
    availability: inStock ? 'https://schema.org/InStock' : 'https://schema.org/OutOfStock',
    url: product.buyUrl
  }
} : null;
---

<article class="product-card" data-product-id={product._id} itemscope itemtype="https://schema.org/Product">
  <figure class="media">
    {detailsUrl ? (
      <a href={detailsUrl} class="media-link" aria-label={`View details: ${product.title}`}>
        <img src={imageUrl} alt={imageAlt} loading="lazy" decoding="async" itemprop="image" />
      </a>
    ) : (
      <img src={imageUrl} alt={imageAlt} loading="lazy" decoding="async" itemprop="image" />
    )}

    {inStock === false && <span class="pill pill-out">Out of stock</span>}
    {isSubscription && <span class="pill pill-sub">{interval === 'year' ? 'Annual' : 'Subscription'}</span>}
  </figure>

  <div class="body">
    <h3 class="title" itemprop="name">
      {detailsUrl ? (
        <a href={detailsUrl} class="title-link">{product.title}</a>
      ) : (
        product.title
      )}
    </h3>

    {product.sku && <div class="sku">SKU: <span>{product.sku}</span></div>}

    {product.shortDescription && (
      <p class="desc" itemprop="description">{product.shortDescription}</p>
    )}

    <div class="meta">
      <div class="price-wrap">
        {hasPrice
          ? (<span class={`price ${isFree ? 'free' : ''}`} aria-label="Price">
               {priceLabel}{isSubscription && !isFree && <small class="interval">&nbsp;{subSuffix}</small>}
             </span>)
          : (isDonation
              ? <span class="price variable">Set amount at checkout</span>
              : <span class="price tba">Price shown at checkout</span>
            )
        }
      </div>

      {shippingBadges.length > 0 && (
        <ul class="badges" aria-label="Shipping options">
          {shippingBadges.map((b) => <li class="badge">{b}</li>)}
        </ul>
      )}
    </div>

    <div class="actions">
      {canBuy ? (
        <a
          href={product.buyUrl}
          class="btn btn-alpha"
          target="_blank"
          rel="noopener"
          aria-label={`${ctaText}: ${product.title}${hasPrice && !isFree ? ` â€” ${priceLabel}` : ''}`}
        >
          {ctaText}
        </a>
      ) : (
        <button class="btn btn-alpha is-disabled" disabled aria-disabled="true" title={inStock ? 'Missing buy link' : 'Out of stock'}>
          {inStock ? 'Unavailable' : 'Out of stock'}
        </button>
      )}
      {detailsUrl && (
        <a href={detailsUrl} class="btn btn-delta" aria-label={`View details: ${product.title}`}>
          View details
        </a>
      )}
    </div>
  </div>

  {ldJson && (
    <script type="application/ld+json">
      {JSON.stringify(ldJson)}
    </script>
  )}
</article>
 