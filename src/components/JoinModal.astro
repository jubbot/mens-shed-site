---
/**
 * Props:
 * - id: string (unique per card)
 * - event: { title?:string, slug?:string, _id?:string, startTime?:string, endTime?:string, location?:string }
 */
const { id, event } = Astro.props;
const TURNSTILE_SITEKEY = import.meta.env.PUBLIC_TURNSTILE_SITEKEY || "";

// --- Event summary formatting (AU/Brisbane) ---
const TZ = 'Australia/Brisbane';
const start = event?.startTime ? new Date(event.startTime) : null;
const end   = event?.endTime   ? new Date(event.endTime)   : null;

const timeFmt = new Intl.DateTimeFormat('en-AU', {
  hour: 'numeric',
  minute: '2-digit',
  hour12: true,
  timeZone: TZ,
});
const timeLabel = (d: Date | null) => {
  if (!d) return '';
  const parts = timeFmt.formatToParts(d);
  const h = parts.find(p => p.type === 'hour')?.value ?? '';
  const m = parts.find(p => p.type === 'minute')?.value ?? '';
  const ap = (parts.find(p => p.type === 'dayPeriod')?.value ?? '').toUpperCase();
  return `${h}:${m} ${ap}`;
};

const dateParts = (d: Date) => {
  const p = Object.fromEntries(
    new Intl.DateTimeFormat('en-AU', {
      timeZone: TZ,
      year: 'numeric',
      month: 'numeric',
      day: 'numeric',
    }).formatToParts(d).map(x => [x.type, x.value])
  ) as Record<string,string>;
  return { y: Number(p.year), m: Number(p.month), d: Number(p.day) };
};

const mon3 = (d: Date) =>
  new Intl.DateTimeFormat('en-AU', { timeZone: TZ, month: 'short' })
    .format(d)
    .toUpperCase(); // AUG

const dateLabel = (s: Date | null, e?: Date | null) => {
  if (!s) return '—';
  const endDate = e ?? s;
  const sP = dateParts(s);
  const eP = dateParts(endDate);
  const sameDay = sP.y === eP.y && sP.m === eP.m && sP.d === eP.d;
  const sameMonth = sP.y === eP.y && sP.m === eP.m;
  const sameYear = sP.y === eP.y;

  if (sameDay) return `${sP.d} ${mon3(s)} ${sP.y}`;
  if (sameMonth) return `${sP.d}–${eP.d} ${mon3(s)} ${sP.y}`;
  if (sameYear) return `${sP.d} ${mon3(s)} – ${eP.d} ${mon3(endDate)} ${sP.y}`;
  return `${sP.d} ${mon3(s)} ${sP.y} – ${eP.d} ${mon3(endDate)} ${eP.y}`;
};

const eventDate = dateLabel(start, end);
const eventTime = start ? `${timeLabel(start)}${end ? ` – ${timeLabel(end)}` : ''}` : '';
const eventTitle = event?.title || 'Event';
const eventLocation = event?.location || '';
---

<div class="join-modal" id={id} role="dialog" aria-modal="true" aria-labelledby={`${id}-title`} hidden>
  <div class="join-modal__backdrop" data-close aria-label="Close"></div>

  <div class="join-modal__card" role="document">
    <header class="join-modal__header">
      <div class="head-left">
        <h4 id={`${id}-title`}>Secure your spot</h4>
        <div class="event-summary" aria-live="polite">
          <div class="es-title">{eventTitle}</div>
          <div class="es-meta">
            <span class="es-date">{eventDate}</span>
            {eventTime && <span class="es-sep">·</span>}
            {eventTime && <span class="es-time">{eventTime}</span>}
            {eventLocation && <span class="es-sep">·</span>}
            {eventLocation && <span class="es-loc">{eventLocation}</span>}
          </div>
        </div>
      </div>
      <button class="join-modal__close" type="button" data-close aria-label="Close">×</button>
    </header>

    <form id={`${id}-form`} class="join-modal__form" method="post" action="/api/join" novalidate>
      <!-- Event context (hidden) -->
      <input type="hidden" name="eventTitle" value={eventTitle} />
      <input type="hidden" name="eventSlug"  value={event?.slug  || ""} />
      <input type="hidden" name="eventId"    value={event?._id    || ""} />
      <input type="hidden" name="startTime"  value={event?.startTime || ""} />
      <input type="hidden" name="endTime"    value={event?.endTime   || ""} />
      <input type="hidden" name="location"   value={eventLocation} />
      <!-- Honeypot -->
      <input type="text" name="website" tabindex="-1" autocomplete="off" class="hp" aria-hidden="true" />
      <!-- Render time (anti-bot) -->
      <input type="hidden" name="renderedAt" value={Date.now().toString()} />

      <div class="grid">
        <label class="field">
          <span>Full name</span>
          <input name="name" type="text" required autocomplete="name" />
        </label>

        <label class="field">
          <span>Email</span>
          <input name="email" type="email" required autocomplete="email" inputmode="email" />
        </label>

        <label class="field">
          <span>Member ID (optional)</span>
          <input name="memberId" type="text" inputmode="text" />
        </label>
      </div>

      {TURNSTILE_SITEKEY ? (
        <div class="turnstile-wrap">
          <script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>
          <div class="cf-turnstile" data-sitekey={TURNSTILE_SITEKEY}></div>
        </div>
      ) : null}

      <div class="actions">
        <button type="submit" class="btn btn-alpha">Secure my spot</button>
        <button type="button" class="btn" data-close>Cancel</button>
      </div>

      <p class="help sm-txt">
        We’ll email your confirmation and any updates. Your details are only used for this event.
      </p>

      <output class="status sm-txt" role="status" aria-live="polite"></output>
    </form>
  </div>
</div>

<style>
  .join-modal[hidden] { display: none; }
  .join-modal { position: fixed; inset: 0; z-index: 1000; }
  .join-modal__backdrop { position:absolute; inset:0; background:rgba(0,0,0,.45); }
  .join-modal__card {
    position: absolute; left: 50%; top: 10%;
    transform: translateX(-50%);
    width: min(560px, 92vw);
    background: #fff; border-radius: 16px;
    box-shadow: 0 30px 60px rgba(0,0,0,.25);
    overflow: hidden;
  }
  .join-modal__header {
    display:flex; align-items:flex-start; justify-content:space-between;
    padding: 1rem 1rem; border-bottom: 1px solid #eee;
    gap: .75rem;
  }
  .head-left { display:flex; flex-direction:column; gap:.35rem; }
  .event-summary {
    border:1px solid #eee; border-radius:10px; padding:.5rem .65rem; background:#fafafa;
  }
  .es-title { font-weight:600; line-height:1.3; }
  .es-meta { display:flex; flex-wrap:wrap; gap:.35rem; color:#555; font-size:.92rem; margin-top:.15rem; }
  .es-sep { opacity:.6; }
  .join-modal__form { padding: 1rem; }
  .grid { display:grid; gap: .75rem; grid-template-columns: 1fr; }
  @media (min-width: 640px){ .grid { grid-template-columns: 1fr 1fr; } }
  .field { display:flex; flex-direction:column; gap:.25rem; }
  .field input { padding:.65rem .75rem; border:1px solid #ddd; border-radius:10px; }
  .actions { display:flex; gap:.5rem; margin-top:.75rem; }
  .btn { padding:.6rem .9rem; border-radius:.6rem; border:1px solid #ddd; background:#fff; }
  .btn-alpha { border-color: transparent; background:#111; color:#fff; }
  .hp { position:absolute; left:-9999px; width:1px; height:1px; }
  .sm-txt { font-size: .9rem; color:#555; }
  .join-modal__close { background:transparent; border:0; font-size:1.25rem; cursor:pointer; }
  .turnstile-wrap { margin-top: .5rem; }
</style>

<!-- Pass server var(s) into the client script -->
<script is:inline define:vars={{ modalId: id }}>
  (function(){
    const root = document.getElementById(modalId);
    if (!root) return;

    const form = root.querySelector('form');
    const status = root.querySelector('.status');
    let lastFocused = null;

    function open() {
      lastFocused = document.activeElement;
      root.hidden = false;
      const first = form.querySelector('input[name="name"]');
      first && first.focus();
      document.addEventListener('keydown', onKey);
      document.body.style.overflow = 'hidden';
    }
    function close() {
      root.hidden = true;
      document.removeEventListener('keydown', onKey);
      document.body.style.overflow = '';
      lastFocused && lastFocused.focus();
    }
    function onKey(e) {
      if (e.key === 'Escape') close();
      if (e.key === 'Tab') trapFocus(e);
    }
    function trapFocus(e) {
      const focusables = root.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
      const list = Array.from(focusables).filter(el => !el.hasAttribute('disabled') && el.offsetParent !== null);
      if (!list.length) return;
      const first = list[0], last = list[list.length - 1];
      if (e.shiftKey && document.activeElement === first) { last.focus(); e.preventDefault(); }
      else if (!e.shiftKey && document.activeElement === last) { first.focus(); e.preventDefault(); }
    }

    // Expose open() to be called from the card
    root.openJoin = open;

    // Close handlers
    root.addEventListener('click', (e) => {
      const t = e.target;
      if (t && t.hasAttribute('data-close')) close();
    });

    // Submit handler
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      status.textContent = 'Submitting…';

      try {
        const fd = new FormData(form);
        const name = (fd.get('name') || '').toString().trim();
        const email = (fd.get('email') || '').toString().trim();
        if (!name || !email) throw new Error('Please fill your name and email.');

        const res = await fetch(form.action, { method: 'POST', body: fd });
        const data = await res.json().catch(() => ({}));

        if (!res.ok || !data.ok) {
          throw new Error(data?.error || 'Unable to secure your spot. Please try again.');
        }

        status.textContent = 'You’re in! Check your email for a confirmation.';
        form.reset();
        setTimeout(close, 900);
      } catch (err) {
        status.textContent = err.message || 'Something went wrong.';
      }
    });
  })();
</script>
