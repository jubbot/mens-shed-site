---
import AddToCalendarSmart from "../components/AddToCalendarSmart.astro";
import JoinModal from "../components/JoinModal.astro";

const { event, href } = Astro.props; // <-- NEW
const placeholderImage = "https://placehold.co/1200x800";

/* ---------- IMAGES ---------- */
const toUrlAlt = (img, fallbackAlt) => {
  if (!img) return null;
  if (typeof img === 'string') return { url: img, alt: fallbackAlt };
  if (img?.asset?.url) return { url: img.asset.url, alt: img.alt || fallbackAlt };
  return null;
};

const title = event?.title ?? 'Event';
const first  = toUrlAlt(event?.firstThumbnail,  `${title} – image 1`);
const second = toUrlAlt(event?.secondThumbnail, `${title} – image 2`);

const primary   = first?.url ? first : (second?.url ? { ...second, alt: `${title} – image 1` } : null);
const secondary = (first?.url && second?.url && first.url !== second.url) ? second : null;

const hasPrimary = !!primary?.url;
const hasSecondary = !!secondary?.url;

/* ---------- seats / waitlist ---------- */
const hasSeatLimit = !!event?.hasSeatLimit;
const seatCapacity = Number(event?.seatCapacity ?? 0);
const seatsReserved = Number(event?.seatsReserved ?? 0);

let seatsLeft = hasSeatLimit
  ? Number.isFinite(event?.spotsLeft)
    ? Number(event.spotsLeft)
    : seatCapacity - seatsReserved
  : null;

if (seatsLeft !== null) seatsLeft = Math.max(0, seatsLeft);

const isSoldOut = hasSeatLimit && (typeof event?.isSoldOut === 'boolean'
  ? event.isSoldOut
  : (seatsLeft ?? 0) <= 0);

const allowWaitlist = !!event?.allowWaitlist;

const showSpotsBadge = hasSeatLimit;
const showJoinButton = hasSeatLimit && ((!isSoldOut && (seatsLeft ?? 0) > 0) || (isSoldOut && allowWaitlist));

const joinLabel = isSoldOut ? (allowWaitlist ? 'Join waitlist' : 'Sold out') : 'Join';
const joinDisabled = isSoldOut && !allowWaitlist;

/* ---------- times / dates ---------- */
const TZ = 'Australia/Brisbane';

const start = event?.startTime ? new Date(event.startTime) : null;
const end = event?.endTime ? new Date(event.endTime) : null;

const timeFmt = new Intl.DateTimeFormat('en-AU', {
  hour: 'numeric',
  minute: '2-digit',
  hour12: true,
  timeZone: TZ,
});
const timeLabel = (d) => {
  if (!d) return '--:--';
  const parts = timeFmt.formatToParts(d);
  const h = parts.find(p => p.type === 'hour')?.value ?? '';
  const m = parts.find(p => p.type === 'minute')?.value ?? '';
  const ap = (parts.find(p => p.type === 'dayPeriod')?.value ?? '').toUpperCase();
  return `${h}:${m} ${ap}`;
};

const dateParts = (d) => {
  const p = Object.fromEntries(
    new Intl.DateTimeFormat('en-AU', { timeZone: TZ, year: 'numeric', month: 'numeric', day: 'numeric' })
      .formatToParts(d).map(x => [x.type, x.value])
  );
  return { y: Number(p.year), m: Number(p.month), d: Number(p.day) };
};

const mon3 = (d) => new Intl.DateTimeFormat('en-AU', { timeZone: TZ, month: 'short' }).format(d).toUpperCase();

const dateLabel = (s, e) => {
  if (!s) return '—';
  const endDate = e ?? s;
  const sP = dateParts(s); const eP = dateParts(endDate);
  const sameDay = sP.y === eP.y && sP.m === eP.m && sP.d === eP.d;
  const sameMonth = sP.y === eP.y && sP.m === eP.m;
  const sameYear = sP.y === eP.y;
  if (sameDay)   return `${sP.d} ${mon3(s)} ${sP.y}`;
  if (sameMonth) return `${sP.d}–${eP.d} ${mon3(s)} ${sP.y}`;
  if (sameYear)  return `${sP.d} ${mon3(s)} – ${eP.d} ${mon3(endDate)} ${sP.y}`;
  return `${sP.d} ${mon3(s)} ${sP.y} – ${eP.d} ${mon3(endDate)} ${eP.y}`;
};

/* ---------- Titles/links ---------- */
const ctaHref = event?.ctaUrl ?? (event?.slug?.current ? `/events/${event.slug.current}` : '#');

// Normalize slug for AddToCalendarSmart
const eventForATC = { ...event, slug: event?.slug?.current ?? event?.slug ?? '' };

// Unique modal id per card (slug-based)
const slugish = (event?.slug?.current || event?.slug || title)
  .toString().toLowerCase().replace(/[^a-z0-9]+/g,'-');
const modalId = `join-${slugish}`;

// Accessibility attrs when card has a target href
const cardAttrs = href
  ? { 'data-href': href, role: 'link', tabindex: 0 }
  : {};
---

<div class="card" {...cardAttrs}>
  <div class="card-poster">
    {!hasPrimary && (
      <>
        {href ? (
          <a href={href} class="cover-link" aria-label={title}>
            <img src={placeholderImage} alt="Event image placeholder" loading="lazy" decoding="async" sizes="100vw" />
          </a>
        ) : (
          <img src={placeholderImage} alt="Event image placeholder" loading="lazy" decoding="async" sizes="100vw" />
        )}
      </>
    )}

    {hasPrimary && !hasSecondary && (
      <>
        {href ? (
          <a href={href} class="cover-link" aria-label={title}>
            <img
              src={primary.url}
              alt={primary.alt}
              loading="eager"
              fetchpriority="high"
              decoding="async"
              sizes="(max-width: 640px) 100vw, (max-width: 1200px) 50vw, 33vw"
            />
          </a>
        ) : (
          <img
            src={primary.url}
            alt={primary.alt}
            loading="eager"
            fetchpriority="high"
            decoding="async"
            sizes="(max-width: 640px) 100vw, (max-width: 1200px) 50vw, 33vw"
          />
        )}
      </>
    )}

    {hasPrimary && hasSecondary && (
      <>
        <div class="poster-slider is-multi" aria-roledescription="carousel" aria-label={`${title} images`} data-slider="true">
          <img
            src={primary.url}
            alt={primary.alt}
            loading="eager"
            fetchpriority="high"
            decoding="async"
            sizes="(max-width: 640px) 100vw, (max-width: 1200px) 50vw, 33vw"
          />
          <img
            src={secondary.url}
            alt={secondary.alt}
            loading="lazy"
            decoding="async"
            sizes="(max-width: 640px) 100vw, (max-width: 1200px) 50vw, 33vw"
          />
        </div>

        <div class="slider-dots" role="tablist" aria-label={`${title} images`}>
          <button class="dot" role="tab" aria-selected="true"  type="button" data-go-to="0" />
          <button class="dot" role="tab" aria-selected="false" type="button" data-go-to="1" />
        </div>
      </>
    )}

    {showSpotsBadge && (
      <span class={`badge ${isSoldOut ? 'badge-soldout' : ''}`}>
        {isSoldOut ? 'Sold out' : `${seatsLeft} spot${seatsLeft === 1 ? '' : 's'} left`}
      </span>
    )}
  </div>

  <div class="info">
    <h3>
      {href ? <a href={href} class="title-link">{title}</a> : title}
    </h3>

    <div class="timestamp grid">
      <div class="date">{dateLabel(start, end)}</div>
      <div class="time">{timeLabel(start)}{end ? ` – ${timeLabel(end)}` : ''}</div>
    </div>

    {event?.description && <div class="description">{event.description}</div>}

    <div class="action btn-group raise">
      {showJoinButton && (
        <a
          href={ctaHref}
          data-open={modalId}
          class={`btn btn-alpha${joinDisabled ? ' is-disabled' : ''}`}
          aria-disabled={joinDisabled ? 'true' : 'false'}
          tabindex={joinDisabled ? -1 : 0}
        >
          {joinLabel}
        </a>
      )}
      <AddToCalendarSmart event={eventForATC} />
    </div>
  </div>
</div>

<JoinModal id={modalId} event={{
  title,
  slug: event?.slug?.current ?? event?.slug ?? '',
  _id: event?._id ?? '',
  startTime: event?.startTime ?? '',
  endTime: event?.endTime ?? '',
  location: event?.location ?? ''
}} />

<script is:inline>
  // Card-wide navigation (only if data-href exists), excluding interactive elements
  document.addEventListener('click', (e) => {
    const card = e.target.closest('.card[data-href]');
    if (!card) return;

    // if the click is on an interactive element, don't hijack
    const interactive = e.target.closest('a, button, [data-open], [data-go-to], input, select, textarea');
    if (interactive) return;

    const url = card.getAttribute('data-href');
    if (url) window.location.href = url;
  });

  // Keyboard support for card-as-link
  document.addEventListener('keydown', (e) => {
    const target = e.target;
    if (!(target instanceof HTMLElement)) return;
    if (!target.matches('.card[data-href]')) return;
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      const url = target.getAttribute('data-href');
      if (url) window.location.href = url;
    }
  });

  // Modal open
  document.addEventListener('click', (e) => {
    const el = e.target.closest('[data-open]');
    if (!el) return;
    if (el.getAttribute('aria-disabled') === 'true') return;

    const id = el.getAttribute('data-open');
    const modal = document.getElementById(id);
    if (modal && typeof modal.openJoin === 'function') {
      e.preventDefault();
      modal.openJoin();
    }
  });

  // Dot navigation (only when 2 images)
  document.addEventListener('click', (e) => {
    const dot = e.target.closest('[data-go-to]');
    if (!dot) return;

    const slider = dot.closest('[data-slider="true"]');
    if (!slider) return;

    const idx = parseInt(dot.getAttribute('data-go-to'), 10);
    const imgs = Array.from(slider.querySelectorAll('img'));
    const first = imgs[0];
    if (!first) return;

    const slideWidth = first.clientWidth;
    slider.scrollTo({ left: idx * slideWidth, behavior: 'smooth' });

    const allDots = dot.parentElement?.querySelectorAll('[data-go-to]');
    allDots?.forEach((d, i) => d.setAttribute('aria-selected', i === idx ? 'true' : 'false'));
  });
</script>

 