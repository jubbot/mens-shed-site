---
// components/projectBanner.astro
import { sanity } from '../lib/sanityClient';

type Slug = string | { current?: string };
type Member = { firstName?: string; lastName?: string; _id?: string };

interface Project {
  title?: string;
  slug?: Slug;
  category?: { title?: string; slug?: Slug } | {_ref?: string};
  subcategory?: { title?: string; slug?: Slug } | {_ref?: string};
  startedAt?: string;
  volunteers?: number;
  views?: number;
  kickstartedBy?: {
    kind?: 'member' | 'other';
    name?: string;
    member?: Member;
  };
  assignees?: Member[];
}

// Props:
// - project (required)
// - fallbackCategorySlug / fallbackSubcategorySlug (optional, from route if you want)
const {
  project,
  fallbackCategorySlug = null,
  fallbackSubcategorySlug = null
} = Astro.props as {
  project: Project;
  fallbackCategorySlug?: string | null;
  fallbackSubcategorySlug?: string | null;
};

const normSlug = (s?: Slug) => (typeof s === 'string' ? s : (s?.current ?? ''));
const toTitle = (s?: string) => (s ? s.replace(/-/g, ' ').replace(/\b\w/g, m => m.toUpperCase()) : '');

const title = project?.title ?? 'Project';
const projectSlug = normSlug(project?.slug);

// Prefer already-resolved category/subcategory if present on props
let cat: { title: string; slug: string } | null =
  (project?.category as any)?.title
    ? { title: (project!.category as any).title, slug: normSlug((project!.category as any).slug) }
    : null;

let sub: { title: string; slug: string } | null =
  (project?.subcategory as any)?.title
    ? { title: (project!.subcategory as any).title, slug: normSlug((project!.subcategory as any).slug) }
    : null;

// If either crumb is missing, resolve via Sanity by slug
if ((!cat || !sub) && projectSlug) {
  try {
    const fetched = await sanity.fetch(
      `*[_type == "project" && slug.current == $slug][0]{
        category->{ title, "slug": slug.current },
        subcategory->{ title, "slug": slug.current }
      }`,
      { slug: projectSlug }
    );
    cat = cat ?? (fetched?.category ? { title: fetched.category.title, slug: fetched.category.slug } : null);
    sub = sub ?? (fetched?.subcategory ? { title: fetched.subcategory.title, slug: fetched.subcategory.slug } : null);
  } catch {}
}

// Last-resort fallbacks from route params (optional)
if (!cat && fallbackCategorySlug) cat = { title: toTitle(fallbackCategorySlug), slug: fallbackCategorySlug };
if (!sub && fallbackSubcategorySlug) sub = { title: toTitle(fallbackSubcategorySlug), slug: fallbackSubcategorySlug };

const fmtDate = (d?: string) => {
  if (!d) return null;
  const dt = new Date(d);
  return Number.isNaN(+dt)
    ? d
    : dt.toLocaleDateString('en-AU', { day: 'numeric', month: 'short', year: 'numeric' });
};

const started = fmtDate(project?.startedAt);

const kickstarterName = (() => {
  const kb = project?.kickstartedBy;
  if (!kb) return null;
  if (kb.kind === 'member') {
    const full = `${kb.member?.firstName ?? ''} ${kb.member?.lastName ?? ''}`.trim();
    return full || null;
  }
  if (kb.kind === 'other') return kb.name ?? null;
  return null;
})();

const assignees = Array.isArray(project?.assignees) ? project!.assignees! : [];
const volunteers = Number.isFinite(project?.volunteers as number) ? Number(project!.volunteers) : null;
const views = Number.isFinite(project?.views as number) ? Number(project!.views) : null;
---

<div class="grid gap banner">
  <div class="l-8 m-8 s-12">
    <nav class="crumpbet" aria-label="Breadcrumb">
      <span><a href="/projects">Projects</a></span>
      {cat && <span><a href={`/projects?category=${cat.slug}`}>{cat.title}</a></span>}
      {sub && <span><a href={`/projects?subcategory=${sub.slug}`}>{sub.title}</a></span>}
    </nav>

    <h1 class="l-txt">{title}</h1>

    <div class="statistic grid">
      {kickstarterName && (
        <div class="figure">
          <span class="label">Project by</span>
          <span>{kickstarterName}</span>
        </div>
      )}

      {started && (
        <div class="figure">
          <span class="label">Started</span>
          <span>{started}</span>
        </div>
      )}

    </div>
  </div>

  <div class="l-4 m-4 s-12">
    <aside class="tipbox">
      <h3>How to support us</h3>
      <p>
        Townsville men generously volunteer their time and expertise to support local community projects —
        and they’re seeking your support to continue making a difference.
      </p>
      <a href="/support" class="btn btn-delta">Learn how to support us</a>
    </aside>
  </div>
</div>

<style>
  
  .statistic.grid { gap: 1rem; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); }
  .figure .label { display:block; font-size:.85rem; opacity:.7; color:#333; margin-bottom:.25rem; }
</style>
