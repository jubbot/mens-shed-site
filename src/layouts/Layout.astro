---
export const prerender = false; // ensure SSR so cookies/headers are writable

import Header from '../components/header1.astro';
import Footer from '../components/footer.astro';
import "../styles/global.scss";
import { createServerClient } from '@supabase/ssr';

interface Props {
  /** Pass only the part AFTER the pipe, e.g. "Category — Subcategory — Project Title" */
  title?: string;
  /** If provided, use this exact string for <title> (bypasses the site-name prefix) */
  fullTitle?: string;
  /** Optional meta description */
  description?: string;
  /** Social/OG image: absolute or relative path */
  image?: string;
  /** Alt text for the social image */
  imageAlt?: string;
  /** Open Graph type: 'website' | 'article' (default 'website') */
  ogType?: 'website' | 'article';
  /** Set true to add robots noindex,nofollow */
  noIndex?: boolean;
}

const SITE_NAME = "Men's Shed Townsville";

const {
  title = "",
  fullTitle = "",
  description = "",
  image = "",
  imageAlt = "",
  ogType = "website",
  noIndex = false,
} = Astro.props as Props;

const computedTitle = fullTitle ? fullTitle : (title ? `${SITE_NAME} | ${title}` : SITE_NAME);
const metaDescription = description || "Men's Shed Townsville community projects and events.";

const canonicalUrl = Astro.url?.href ?? "";
const ogImage = image ? new URL(image, Astro.url).href : "";
const twitterCard = ogImage ? "summary_large_image" : "summary";

/** Supabase SSR: create client & sync cookies BEFORE any HTML is sent */
const supabase = createServerClient(
  import.meta.env.PUBLIC_SUPABASE_URL!,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY!,
  {
    cookies: {
      get: (k) => Astro.cookies.get(k)?.value,
      set: (k, v, o) => Astro.cookies.set(k, v, o),
      remove: (k, o) => Astro.cookies.delete(k, o),
    },
  }
);

// Trigger early cookie refresh so headers can be written safely
await supabase.auth.getSession();

const { data: { user } } = await supabase.auth.getUser();

type Profile = { first_name?: string | null; last_name?: string | null; display_name?: string | null };
let profile: Profile | null = null;
let displayName: string | null = null;

if (user) {
  const { data } = await supabase
    .from('profiles')
    .select('first_name,last_name,display_name')
    .eq('id', user.id)
    .single();

  profile = data ?? null;

  if (data?.first_name || data?.last_name) {
    displayName = `${data?.first_name ?? ''} ${data?.last_name ?? ''}`.trim();
  } else {
    displayName = data?.display_name ?? user.email ?? 'User';
  }
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <title>{computedTitle}</title>

    {canonicalUrl && <link rel="canonical" href={canonicalUrl} />}

    {noIndex && <meta name="robots" content="noindex,nofollow" />}

    <meta name="description" content={metaDescription} />

    <meta property="og:site_name" content={SITE_NAME} />
    <meta property="og:type" content={ogType} />
    {canonicalUrl && <meta property="og:url" content={canonicalUrl} />}
    <meta property="og:title" content={computedTitle} />
    <meta property="og:description" content={metaDescription} />
    {ogImage && <meta property="og:image" content={ogImage} />}
    {ogImage && imageAlt && <meta property="og:image:alt" content={imageAlt} />}

    <meta name="twitter:card" content={twitterCard} />
    <meta name="twitter:title" content={computedTitle} />
    <meta name="twitter:description" content={metaDescription} />
    {ogImage && <meta name="twitter:image" content={ogImage} />}

    <!-- Fonts only (no Sanity) -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap"
      rel="stylesheet"
    />

    <slot name="head" />
  </head>
  <body>
    <Header user={user} profile={profile} displayName={displayName} />
    <main>
      <slot />
    </main>
    <Footer />
  </body>
</html>
